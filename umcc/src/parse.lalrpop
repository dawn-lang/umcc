// Copyright (c) 2021 Scott J Maddox
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::core::*;
use crate::interp::*;

grammar(interner: &mut Interner);

pub Expr: Expr = {
    <mut es:SingleExpr*> => {
        if es.len() == 1 {
            es.drain(..).next().unwrap()
        } else {
            Expr::Compose(es)
        }
    },
}

SingleExpr: Expr = {
    push => Expr::Intrinsic(Intrinsic::Push),
    pop => Expr::Intrinsic(Intrinsic::Pop),
    clone => Expr::Intrinsic(Intrinsic::Clone),
    drop => Expr::Intrinsic(Intrinsic::Drop),
    quote => Expr::Intrinsic(Intrinsic::Quote),
    compose => Expr::Intrinsic(Intrinsic::Compose),
    apply => Expr::Intrinsic(Intrinsic::Apply),
    IDENT => Expr::Call(TermSymbol(interner.get_or_intern(<>))),
    LBRACKET <Expr> RBRACKET => Expr::Quote(Box::new(<>)),
    LPAREN <s:StackId> PIPE <e:Expr> RPAREN => Expr::StackContext(s, Box::new(e)),
}

pub(crate) TermSymbol: TermSymbol = {
    IDENT => TermSymbol(interner.get_or_intern(<>))
}

pub(crate) StackSymbol: StackSymbol = {
    IDENT => StackSymbol(interner.get_or_intern(<>))
}

pub(crate) StackId: StackId = {
    StackSymbol => StackId(<>, 0)
}

pub TermDef: TermDef = {
    LBRACE term <t:TermSymbol> EQUAL <e:Expr> RBRACE => TermDef(t, e),
}

pub InterpItems: (Vec<TermDef>, Expr) = {
    <ts:TermDef*> <e:Expr> => (ts, e),
}

pub(crate) InterpCommand: InterpCommand = {
    <is:InterpItems> => InterpCommand::Eval(is.0, is.1),
    COLON_TRACE <Expr> => InterpCommand::Trace(<>),
    COLON_SHOW <TermSymbol> => InterpCommand::Show(<>),
    COLON_LIST => InterpCommand::List,
    COLON_DROP => InterpCommand::Drop,
    COLON_CLEAR => InterpCommand::Clear,
    COLON_RESET => InterpCommand::Reset,
    COLON_HELP => InterpCommand::Help,
}

pub Value: Value = {
    IDENT => Value::Call(TermSymbol(interner.get_or_intern(<>))),
    LBRACKET <Expr> RBRACKET => Value::Quote(Box::new(<>)),
}

ValueStack: (StackId, ValueStack) = {
    BRA <s:StackId> PIPE <vs:Value*> KET =>(s, ValueStack(vs)),
}

pub ValueMultistack: ValueMultistack = {
    <mut vss:ValueStack*> => ValueMultistack(vss.drain(..).collect()),
}

pub(crate) SmallStepRule: SmallStepRule = {
    IntrPush => SmallStepRule::IntrPush,
    IntrPop => SmallStepRule::IntrPop,
    IntrClone => SmallStepRule::IntrClone,
    IntrDrop => SmallStepRule::IntrDrop,
    IntrQuote => SmallStepRule::IntrQuote,
    IntrCompose => SmallStepRule::IntrCompose,
    IntrApply => SmallStepRule::IntrApply,
    LitCallQuote => SmallStepRule::LitCallQuote,
    LitCall => SmallStepRule::LitCall,
    LitQuote => SmallStepRule::LitQuote,
    StkCtxDistr => SmallStepRule::StkCtxDistr,
    StkCtx3Redund => SmallStepRule::StkCtx3Redund,
    StkCtxEmpty => SmallStepRule::StkCtxEmpty,
}

pub(crate) SmallStepAssertion:
    (ValueMultistack, Expr, SmallStepRule, ValueMultistack, Expr) = {
    <ivms: ValueMultistack> <ie: Expr>
        FIGURE_DASH <rule:SmallStepRule> LONG_RARROW
        <ovms: ValueMultistack> <oe: Expr> => {
        (ivms, ie, rule, ovms, oe)
    }
}

pub(crate) BigStepAssertion: (ValueMultistack, Expr, ValueMultistack, Expr) = {
    <ivms: ValueMultistack> <ie: Expr> DDARROW <ovms: ValueMultistack> <oe: Expr> => {
        (ivms, ie, ovms, oe)
    }
}

match {
    r"\s*" => { }, // skip whitespace
    r"--[^\n\r]*[\n\r]*" => { }, // Skip `--` comments
    r"\|" => PIPE,
    r"\(" => LPAREN,
    r"\)" => RPAREN,
    r"\[" => LBRACKET,
    r"\]" => RBRACKET,
    r"\{" => LBRACE,
    r"\}" => RBRACE,
    r"push" => push,
    r"pop" => pop,
    r"clone" => clone,
    r"drop" => drop,
    r"quote" => quote,
    r"compose" => compose,
    r"apply" => apply,
    r"term" => term,
    r"=" => EQUAL,
    r"⟨" => BRA,
    r"⟩" => KET,
    r"IntrPush" => IntrPush,
    r"IntrPop" => IntrPop,
    r"IntrClone" => IntrClone,
    r"IntrDrop" => IntrDrop,
    r"IntrQuote" => IntrQuote,
    r"IntrCompose" => IntrCompose,
    r"IntrApply" => IntrApply,
    r"LitCallQuote" => LitCallQuote,
    r"LitCall" => LitCall,
    r"LitQuote" => LitQuote,
    r"StkCtxDistr" => StkCtxDistr,
    r"StkCtx3Redund" => StkCtx3Redund,
    r"StkCtxEmpty" => StkCtxEmpty,
    r"‒" => FIGURE_DASH,
    r"⟶" => LONG_RARROW,
    r"⇓" => DDARROW,
    r":trace" => COLON_TRACE,
    r":show" => COLON_SHOW,
    r":list" => COLON_LIST,
    r":drop" => COLON_DROP,
    r":clear" => COLON_CLEAR,
    r":reset" => COLON_RESET,
    r":help" => COLON_HELP,
} else {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT,
}
